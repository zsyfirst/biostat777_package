?qt
calculate_CI <- function(x, conf = 0.95) {
total = 0
n <- length(x)
for (i in 1:n) {
total = total + x[i]
}
mean = total/n
variance = 0
for ( j in 1:n) {
variance = variance + (x[j]-mean)^2
}
sample_sd = sqrt(variance/(n-1))
alpha <- 1-conf
t_score = qt(1-alpha/2,df = n-1, lower.tail = T )
lower_bound = mean - t_score*sample_sd
upper_bound = mean + t_score*sample_sd
CI <-  c("lower_bound" = lower_bound, "upper_bound" = upper_bound)
return( CI )
}
set.seed(19990318)
x <- rnorm(10, 2, 1)
ci_95 <- calculate_CI(x, conf = 0.95 )
print(ci_95)
calculate_CI_2 <- function(x, conf = 0.95) {
alpha <- 1 - conf
degrees_freedom <- length(x)-1
t_score <- qt(p = alpha / 2, df = degrees_freedom, lower.tail = FALSE)
lower_bound <- mean(x) - t_score*sd(x)/sqrt(length(x))
upper_bound <- mean(x) + t_score*sd(x)/sqrt(length(x))
CI <- c("lower_bound" = lower_bound, "upper_bound" = upper_bound)
return(CI)
}
ci_95_2 <- calculate_CI_2(x, conf = 0.95 )
print(ci_95_2)
sample_sd <- function(x) {
total = 0
n <- length(x)
for (i in 1:n) {
total = total + x[i]
}
mean = total/n
variance = 0
for ( j in 1:n) {
variance = variance + (x[j]-mean)^2
}
sample_sd = sqrt(variance/(n-1))
return(sample_sd)
}
sample_sd(x)
sd(x)
calculate_CI <- function(x, conf = 0.95) {
total = 0
n <- length(x)
for (i in 1:n) {
total = total + x[i]
}
mean = total/n
variance = 0
for ( j in 1:n) {
variance = variance + (x[j]-mean)^2
}
sample_sd = sqrt(variance/(n-1))
alpha <- 1-conf
t_score = qt(1-alpha/2,df = n-1, lower.tail = T )
lower_bound = mean - t_score*sample_sd/sqrt(n)
upper_bound = mean + t_score*sample_sd/sqrt(n)
CI <-  c("lower_bound" = lower_bound, "upper_bound" = upper_bound)
return( CI )
}
ci_95 <- calculate_CI(x, conf = 0.95 )
print(ci_95)
c(1:10)
devtools::document()
library(calculate)
calculate_CI(rnorm(10,2,1))
sample_sd(rnorm(10,2,1))
library(calculate)
fn_cos(2,5)
fn_cos(2, 2)
?is.integer
is.integer(1)
is.wholenumber(1)
as.integer(1)
library(calculate)
fun_sin(2,5)
fun_sin(2,5.1)
fun_sin(2,5l)
fun_sin(2,5L)
is.numeric(rnorm(10))
install.packages("usethis")
install.packages("devtools")
library(usethis)
library(devtools)
# install.packages("usethis")
# install.packages("devtools")
library(usethis)
library(devtools)
use_vignette("vignettes")
devtools::build_vignettes()
devtools::check()
?range
library(calculate)
x <- range(1,10, 0.1 )
?rnorm
x <- range(100, 1,10  )
?sequence
x_values <- seq(0, 10, by = 0.1)
y_2 <- cos(x)
k <- c(1,3,5,7,9)
for (i in k){
y_1i <- fn_cos(x, k)
}
for (i in 1:k){
y_1i <- fn_cos(x, k)
}
for (i in c(1,3,5,7,9) ){
y_1i <- fn_cos(x, k)
}
for (i in c(1,3,5,7,9) ){
y_1i <- fn_cos(x, i)
}
x_values <- seq(0, 10, by = 0.1)
y_cos <- cos(x)
y_cos <- cos(x_values)
k <- c(1,3,5,7,9)
for (i in k ){
y_fn_i <- fn_cos(x_values, i)
}
for (i in k ){
y_fn[i] <- fn_cos(x_values, i)
}
x_values <- seq(0, 10, by = 0.1)
y_cos <- cos(x_values)
y_fn_1 <- fn_cos(x_values, 1)
y_fn_3 <- fn_cos(x_values, 3)
y_fn_5 <- fn_cos(x_values, 5)
y_fn_7 <- fn_cos(x_values, 7)
y_fn_9 <- fn_cos(x_values, 9)
# k <- c(1,3,5,7,9)
# for (i in k ){
#       y_fn[i] <- fn_cos(x_values, i)
# }
data <-data.frame(x_values, y_cos, y_fn_1,y_fn_3, y_fn_5, y_fn_7, y_fn_9 )
View(data)
data_melted <- melt(data, id.vars = "x_values") ## use ?melt() to see what it's doing
library(ggplot2) ## package to make ggplots
# install.packages('reshape2') # run this line if reshape2 is not installed
library(reshape2) ## package to make data frames for ggplot
data_melted <- melt(data, id.vars = "x_values") ## use ?melt() to see what it's doing
View(data_melted)
## Change labels for y1, y2, y3, y4, y5
data_melted$variable <-
factor(as.character(data_melted$variable),
levels = c("y_cos", "y_fn_1", "y_fn_3", "y_fn_5", "y_fn_7", "y_fn_9"),
labels = c("cos", "fn_cos, k=1",
"fn_cos, k=3", "fn_cos, k=5",
"fn_cos, k=7", "fn_cos, k=9"))
View(data_melted)
data_melted %>%
ggplot( aes(x_values,values ) ) +
geom_line(aes(color = variable), linewidth=1)
library(tidyverse)
data_melted %>%
ggplot( aes(x_values,values ) ) +
geom_line(aes(color = variable), linewidth=1)
View(data_melted)
data_melted %>%
ggplot( aes(x_values,value ) ) +
geom_line(aes(color = variable), linewidth=1)
?lubridate
?desc
?forcats
?stringr
View(data_melted)
data_melted %>%
ggplot( aes(x_values,value ) ) +
geom_line(aes(color = variable), linewidth=1) +
geom_point(data = subset(data_melted, variable == "cos"))
data_melted %>%
ggplot( aes(x_values,value ) ) +
geom_line(aes(color = variable), linewidth=1) +
geom_point(data = subset(data_melted, variable == "cos")) +
theme_minimal() +
labs(
title = "Comparison of fn_cos(x, k) with cos(x)",
x = "x values",
y = "Calculated y values"
)
data_melted %>%
ggplot( aes(x_values,value ) ) +
geom_line(aes(color = variable), linewidth=1) +
geom_point(data = subset(data_melted, variable == "cos")) +
theme_minimal() +
labs(
title = "Comparison of fn_cos(x, k) with cos(x)",
x = "x values",
y = "Calculated y values",
color = "Function and k value"
)
data_melted %>%
ggplot( aes(x_values,value ) ) +
geom_line(aes(color = variable), linewidth=1) +
geom_point(data = subset(data_melted, variable == "cos"), size = 1 ) +
theme_minimal() +
labs(
title = "Comparison of fn_cos(x, k) with cos(x)",
x = "x values",
y = "Calculated y values",
color = "Function and k value"
)
ggplot(data_melted, aes(x_values, value, color = variable)) +
geom_line() +
geom_point(aes(size = variable == "cos")) +
scale_size_manual(value = c(0, 1)) +
theme_minimal() +
labs(title = "Comparison of fn_cos(x, k) with cos(x)",
x = "x values",
y = "Calculated y values",
color = "Function and k value",
size = "") +
guides(size = guide_legend(override.aes = list(size = 3)))
ggplot(data_melted, aes(x_values, value, color = variable)) +
geom_line() +
geom_point(aes(size = variable == "cos")) +
scale_size_manual(values = c(0, 1)) +
theme_minimal() +
labs(title = "Comparison of fn_cos(x, k) with cos(x)",
x = "x values",
y = "Calculated y values",
color = "Function and k value",
size = "") +
guides(size = guide_legend(override.aes = list(size = 3)))
ggplot(data_melted, aes(x_values, value, color = variable)) +
geom_line() +
geom_point(aes(size = variable == "cos")) +
theme_minimal() +
labs(title = "Comparison of fn_cos(x, k) with cos(x)",
x = "x values",
y = "Calculated y values",
color = "Function and k value",
size = "")
ggplot(data_melted) +
geom_line(data = subset(data_melted, variable != "cos"), aes(x = x_values, y = value, color = variable)) +
geom_point(data = subset(data_melted, variable == "cos"), aes(x = x_values, y = value, color = variable)) +
theme_minimal() +
labs(title = "Comparison of fn_cos(x, k) with cos(x)",
x = "x values",
y = "Calculated y values",
color = "Function and k value")
？rainbow
?rainbow
ggplot(data_melted) +
geom_line(data = subset(data_melted, variable != "cos"), aes(x = x_values, y = value, color = variable)) +
geom_point(data = subset(data_melted, variable == "cos"), aes(x = x_values, y = value, color = variable)) +
theme_minimal() +
labs(title = "Comparison of fn_cos(x, k) with cos(x)",
x = "x values",
y = "Calculated y values",
color = "Function and k value") +
scale_color_manual(values = rainbow( 5 + 1)) +
guides(color = guide_legend(override.aes = list(linetype = c(rep("blank", 5), "solid"),
shape = c(rep(NA, 5)), 16)))
ggplot(data_melted) +
geom_line(data = subset(data_melted, variable != "cos"), aes(x = x_values, y = value, color = variable)) +
geom_point(data = subset(data_melted, variable == "cos"), aes(x = x_values, y = value, color = variable)) +
theme_minimal() +
labs(title = "Comparison of fn_cos(x, k) with cos(x)",
x = "x values",
y = "Calculated y values",
color = "Function and k value") +
scale_color_manual(values = rainbow( 6)) +
guides(color = guide_legend(override.aes = list(linetype = c(rep("blank", 5), "solid"),
shape = c(rep(NA, 5)), 16)))
data_melted %>%
ggplot( aes(x_values,value ) ) +
geom_line(aes(color = variable), linewidth=1) +
geom_point(data = subset(data_melted, variable == "cos"), size = 1 ) +
theme_minimal() +
labs(
title = "Comparison of fn_cos(x, k) with cos(x)",
x = "x values",
y = "Calculated y values",
color = "Function and k value"
)
data_melted %>%
ggplot( aes(x_values,value ) ) +
geom_line(data = subset(data_melted, variable != "cos"),aes(color = variable), linewidth=1) +
geom_point(data = subset(data_melted, variable == "cos"), size = 1 ) +
theme_minimal() +
labs(
title = "Comparison of fn_cos(x, k) with cos(x)",
x = "x values",
y = "Calculated y values",
color = "Function and k value"
)
data_melted %>%
ggplot( aes(x_values,value ) ) +
geom_line(data = subset(data_melted, variable != "cos"),aes(color = variable), linewidth=1) +
geom_point(data = subset(data_melted, variable == "cos"),aes(color = variable), size = 1 ) +
theme_minimal() +
labs(
title = "Comparison of fn_cos(x, k) with cos(x)",
x = "x values",
y = "Calculated y values",
color = "Function and k value"
)
data_melted %>%
ggplot( aes(x_values,value ) ) +
geom_line(data = subset(data_melted, variable != "cos"),aes(color = variable), linewidth=1) +
geom_point(data = subset(data_melted, variable == "cos"),aes(color = variable), size = 1 ) +
theme_minimal() +
labs(
title = "Comparison of fn_cos(x, k) with cos(x)",
x = "x values",
y = "Calculated y values",
color = "Function and k value"
) +
guides(color = guide_legend(override.aes = list(linetype = c("blank", "solid", "solid", "solid", "solid", "solid"),
shape = c(16, NA, NA, NA, NA, NA))))
x_values <- seq(0, 10, by = 0.1)
y_sin <- sin(x_values)
y_fn_1 <- fn_sin(x_values, 1)
library(calculate)
x_values <- seq(0, 10, by = 0.1)
y_sin <- sin(x_values)
y_fn_1 <- fn_sin(x_values, 1)
y_fn_3 <- fn_sin(x_values, 3)
y_fn_5 <- fn_sin(x_values, 5)
y_fn_7 <- fn_sin(x_values, 7)
y_fn_9 <- fn_sin(x_values, 9)
data <-data.frame(x_values, y_sin, y_fn_1,y_fn_3, y_fn_5, y_fn_7, y_fn_9 )
data_melted <- melt(data, id.vars = "x_values") ## use ?melt() to see what it's doing
## Change labels for y1, y2, y3, y4, y5
data_melted$variable <-
factor(as.character(data_melted$variable),
levels = c("y_sin", "y_fn_1", "y_fn_3", "y_fn_5", "y_fn_7", "y_fn_9"),
labels = c("sin(x)", "fn_sin, k=1",
"fn_sin, k=3", "fn_sin, k=5",
"fn_sin, k=7", "fn_sin, k=9"))
data_melted %>%
ggplot( aes(x_values,value ) ) +
geom_line(data = subset(data_melted, variable != "sin"),aes(color = variable), linewidth=1) +
geom_point(data = subset(data_melted, variable == "sin"),aes(color = variable), size = 1 ) +
theme_minimal() +
labs(
title = "Comparison of fn_sin(x, k) with sin(x)",
x = "x values",
y = "Calculated y values",
color = "Function and k value"
) +
guides(color = guide_legend(override.aes = list(linetype = c("blank", "solid", "solid", "solid", "solid", "solid"),
shape = c(16, NA, NA, NA, NA, NA))))
# tuesdata <- tidytuesdayR::tt_load("2021-02-23")
# employed <- tuesdata$employed
# tests if a directory named "data" exists locally
if (!dir.exists(here("data"))) {
dir.create(here("data"))
}
#| warning: false
library("tidytuesdayR")
library("here")
library("tidyverse")
# library("lubridate")
# tests if a directory named "data" exists locally
if (!dir.exists(here("data"))) {
dir.create(here("data"))
}
# saves data only once (not each time you knit a R Markdown)
if (!file.exists(here("data", "employed.RDS"))) {
url_csv <- "https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-02-23/employed.csv"
employed <- readr::read_csv(url_csv)
# save the file to RDS objects
saveRDS(employed, file = here("data", "employed.RDS"))
}
employed <- readRDS(here("data", "employed.RDS"))
earn <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-02-23/earn.csv')
as_tibble(employed)
if (!file.exists(here("data", "tuesdata_employed_status.RDS"))) {
tuesdata <- tidytuesdayR::tt_load("2021-02-23")
earn <- tuesdata$earn
employed <- tuesdata$employed
# save the files to RDS objects
saveRDS(tuesdata$earn, file = here("data", "tuesdata_earn.RDS"))
saveRDS(tuesdata$employed, file = here("data", "tuesdata_employed.RDS"))
}
earn <- readRDS(here("data", "tuesdata_earn.RDS"))
employed <- readRDS(here("data", "tuesdata_employed.RDS"))
earn_clean <- earn %>%
select(sex, race, age, year, median_weekly_earn) %>%
mutate(
age_group = case_when(  age == "16 to 24 years" ~ 1 ,
age == "25 to 54 years" ~ 2 ,
age == "55 years and over" ~ 3 ,
),
sex_group = factor(sex, levels = c("Both Sexes", "Men", "Women") , labels = c(0, 1, 2))
)  %>%
filter(age_group == 2 ) %>%
mutate(Race_group = factor(race, levels = c("All Races", "Asian", "Black or African American","White") , labels = c(0, 1, 2, 3) ))
adults_earn_race <- earn_clean %>%
group_by( race, year) %>%
summarise(
year_earn = sum(median_weekly_earn)
)  %>%
arrange(year, .by_group = TRUE)
View(adults_earn_race)
adults_earn_sex <- earn_clean %>%
group_by( sex_group, year) %>%
summarise(
year_earn = sum(median_weekly_earn)
) %>%
arrange(desc(year), .by_group = TRUE)
adults_earn_race <- earn_clean %>%
group_by( race, year) %>%
summarise(
year_earn = sum(median_weekly_earn),
earn_CI = calculate_CI(median_weekly_earn)
)  %>%
arrange(year, .by_group = TRUE)
View(earn_clean)
earn_race_ci <- earn_clean %>%
group_by( race, year) %>%
summarise(
year_earn = sum(median_weekly_earn),
earn_CI = calculate_CI( c(median_weekly_earn, 0.90))
)  %>%
arrange(year, .by_group = TRUE)
library(calculate)
install.packages("C:/Users/17103/OneDrive - Johns Hopkins/桌面/biostat777-package-SunanP2-master.zip", repos = NULL, type = "win.binary")
# Install the devtools package if not already installed
if (!requireNamespace("devtools", quietly = TRUE)) {
install.packages("devtools")
}
# Install MyPackage from GitHub
devtools::install_github("https://github.com/SNGao/biostat777-package-SunanP2")
library(SunanP2)
calculate_CI()
calculate_CI(c(1:100))
calculate_CI(make_ci_class(c(1:100)))
remove.packages('SunanP2')
remove.packages(SunanP2)
library(SunanP2)
# install.packages("usethis")
# install.packages("devtools")
library(usethis)
library(devtools)
use_readme_md("README")
