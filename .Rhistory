ggplot( aes(x_values,value ) ) +
geom_line(data = subset(data_melted, variable != "cos"),aes(color = variable), linewidth=1) +
geom_point(data = subset(data_melted, variable == "cos"),aes(color = variable), size = 1 ) +
theme_minimal() +
labs(
title = "Comparison of fn_cos(x, k) with cos(x)",
x = "x values",
y = "Calculated y values",
color = "Function and k value"
) +
guides(color = guide_legend(override.aes = list(linetype = c("blank", "solid", "solid", "solid", "solid", "solid"),
shape = c(16, NA, NA, NA, NA, NA))))
x_values <- seq(0, 10, by = 0.1)
y_sin <- sin(x_values)
y_fn_1 <- fn_sin(x_values, 1)
y_fn_3 <- fn_sin(x_values, 3)
y_fn_5 <- fn_sin(x_values, 5)
y_fn_7 <- fn_sin(x_values, 7)
y_fn_9 <- fn_sin(x_values, 9)
data <-data.frame(x_values, y_sin, y_fn_1,y_fn_3, y_fn_5, y_fn_7, y_fn_9 )
data_melted <- melt(data, id.vars = "x_values") ## use ?melt() to see what it's doing
## Change labels for y1, y2, y3, y4, y5
data_melted$variable <-
factor(as.character(data_melted$variable),
levels = c("y_sin", "y_fn_1", "y_fn_3", "y_fn_5", "y_fn_7", "y_fn_9"),
labels = c("sin(x)", "fn_sin, k=1",
"fn_sin, k=3", "fn_sin, k=5",
"fn_sin, k=7", "fn_sin, k=9"))
data_melted %>%
ggplot( aes(x_values,value ) ) +
geom_line(data = subset(data_melted, variable != "sin"),aes(color = variable), linewidth=1) +
geom_point(data = subset(data_melted, variable == "sin"),aes(color = variable), size = 1 ) +
theme_minimal() +
labs(
title = "Comparison of fn_sin(x, k) with sin(x)",
x = "x values",
y = "Calculated y values",
color = "Function and k value"
) +
guides(color = guide_legend(override.aes = list(linetype = c("blank", "solid", "solid", "solid", "solid", "solid"),
shape = c(16, NA, NA, NA, NA, NA))))
library(CalSiyu)
set.seed(1234)
x <- rnorm(100)
ci_object <- make_ci_class(x)
ci_example <- calculate_CI(ci_object)
ci_example <- calculate_CI(ci_object, 0.95)
library(CalSiyu)
set.seed(1234)
x <- rnorm(100)
ci_object <- make_ci_class(x)
ci_example <- calculate_CI(ci_object, 0.95)
make_ci_class(1:10, 0.95)
class(ci_object)
print(ci_object)
library(CalSiyu)
ci_example <- calculate_CI(ci_object, 0.95)
ci_object <- make_ci_class(x)
ci_example <- calculate_CI(ci_object, 0.95)
ci_example <- calculate_CI.ci_class(ci_object, 0.95)
ci_example
print(ci_object)
summary(ci_object)
library(CalSiyu)
ci_example <- calculate_CI(ci_object, 0.95)
library(CalSiyu)
calculate_CI(ci_object)
library(CalSiyu)
ci_example <- calculate_CI(ci_object)
library(CalSiyu)
ci_example <- calculate_CI(ci_object)
ci_object <- make_ci_class(x)
ci_example <- calculate_CI(ci_object)
summary(ci_object)
class(ci_object)
library(CalSiyu)
set.seed(1234)
x <- rnorm(100)
ci_object <- make_ci_class(x)
# Calculating a 95% confidence interval
ci_example <- calculate_CI(ci_object)
attributes(ci_object)
View(ci_object)
library(CalSiyu)
set.seed(1234)
x <- rnorm(100)
ci_object <- make_ci_class(x)
# Calculating a 95% confidence interval
ci_example <- calculate_CI(ci_object)
ci_example <- calculate_CI.ci_class(ci_object, 0.95)
ci_example
?tidyr
??tidyr
#| warning: false
library("tidytuesdayR")
library("here")
library("tidyverse")
# library("lubridate")
?tidyr
library(ggplot2) ## package to make ggplots
# install.packages('reshape2') # run this line if reshape2 is not installed
library(reshape2) ## package to make data frames for ggplot
library(tidyverse)
# tuesdata <- tidytuesdayR::tt_load("2021-02-23")
# employed <- tuesdata$employed
# tests if a directory named "data" exists locally
if (!dir.exists(here("data"))) {
dir.create(here("data"))
}
# saves data only once (not each time you knit a R Markdown)
if (!file.exists(here("data", "employed.RDS"))) {
url_csv <- "https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-02-23/employed.csv"
employed <- readr::read_csv(url_csv)
# save the file to RDS objects
saveRDS(employed, file = here("data", "employed.RDS"))
}
employed <- readRDS(here("data", "employed.RDS"))
earn <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-02-23/earn.csv')
as_tibble(employed)
?as_tibble
View(earn)
earn_clean <- earn %>%
select(sex, race, age, year, median_weekly_earn , n_persons) %>%
mutate(
age_group = case_when(  age == "16 to 24 years" ~ 1 ,
age == "25 to 54 years" ~ 2 ,
age == "55 years and over" ~ 3 ,
),
sex_group = factor(sex, levels = c("Both Sexes", "Men", "Women") , labels = c(0, 1, 2))
)  %>%
filter(age_group == 2 ) %>%
mutate(Race_group = factor(race, levels = c("All Races", "Asian", "Black or African American","White") , labels = c(0, 1, 2, 3) ))
adults_earn_race <- earn_clean %>%
group_by( race, year) %>%
summarise(
year_earn = sum(median_weekly_earn)
)  %>%
arrange(year, .by_group = TRUE)
adults_earn_sex <- earn_clean %>%
group_by( sex_group, year) %>%
summarise(
year_earn = sum(median_weekly_earn)
) %>%
arrange(desc(year), .by_group = TRUE)
earn_wider <- pivot_wider(earn_clean, names_from = sex, values_from = n_persons)
View(earn_wider)
earn_wider <- pivot_wider(earn_clean, names_from = sex, values_from = median_weekly_earn)
View(earn_wider)
earn_wider <- pivot_wider(earn_clean, names_from = sex, values_from = median_weekly_earn) %>%
replace_na(list(Both_sex = NA, Men = NA, Women = NA ))
?replace_na
attr(earn_wider)
class(earn_wider)
earn_wider <- as.tibble(earn_wider) %>%
replace_na(list(Both_sex = NA, Men = NA, Women = NA ))
View(earn_wider)
replace_na(earn_wider, list(Both_sex = NA, Men = NA, Women = NA ))
replace_na(earn_wider, list(Both_sex = 0, Men = 0, Women = 0 ))
replace_na(earn_wider, list(Both_sex = 0 ))
View(earn_wider)
?dbinom
library(CalSiyu)
# Calculating a 95% confidence interval
ci_example <- calculate_CI(ci_object)
set.seed(1234)
x <- rnorm(100)
ci_object <- make_ci_class(x)
# Calculating a 95% confidence interval
ci_example <- calculate_CI(ci_object)
ci_example <- calculate_CI.ci_class(ci_object, 0.95)
ci_example
# Calculating a 95% confidence interval
ci_example <- calculate_CI(ci_object)
library(CalSiyu)
# Calculating a 95% confidence interval
ci_example <- calculate_CI(ci_object)
ci_example <- calculate_CI.ci_class(ci_object, 0.95)
ci_example
library(ggplot2) ## package to make ggplots
# install.packages('reshape2') # run this line if reshape2 is not installed
library(reshape2) ## package to make data frames for ggplot
library(tidyverse)
#| warning: false
library("tidytuesdayR")
library("here")
library("tidyverse")
# library("lubridate")
# tuesdata <- tidytuesdayR::tt_load("2021-02-23")
# employed <- tuesdata$employed
# tests if a directory named "data" exists locally
if (!dir.exists(here("data"))) {
dir.create(here("data"))
}
# saves data only once (not each time you knit a R Markdown)
if (!file.exists(here("data", "employed.RDS"))) {
url_csv <- "https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-02-23/employed.csv"
employed <- readr::read_csv(url_csv)
# save the file to RDS objects
saveRDS(employed, file = here("data", "employed.RDS"))
}
employed <- readRDS(here("data", "employed.RDS"))
earn <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-02-23/earn.csv')
# tuesdata <- tidytuesdayR::tt_load("2021-02-23")
# employed <- tuesdata$employed
# tests if a directory named "data" exists locally
if (!dir.exists(here("data"))) {
dir.create(here("data"))
}
# saves data only once (not each time you knit a R Markdown)
if (!file.exists(here("data", "employed.RDS"))) {
url_csv <- "https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-02-23/employed.csv"
employed <- readr::read_csv(url_csv)
# save the file to RDS objects
saveRDS(employed, file = here("data", "employed.RDS"))
}
employed <- readRDS(here("data", "employed.RDS"))
earn <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-02-23/earn.csv')
as_tibble(employed)
if (!file.exists(here("data", "tuesdata_employed_status.RDS"))) {
tuesdata <- tidytuesdayR::tt_load("2021-02-23")
earn <- tuesdata$earn
employed <- tuesdata$employed
# save the files to RDS objects
saveRDS(tuesdata$earn, file = here("data", "tuesdata_earn.RDS"))
saveRDS(tuesdata$employed, file = here("data", "tuesdata_employed.RDS"))
}
earn <- readRDS(here("data", "tuesdata_earn.RDS"))
employed <- readRDS(here("data", "tuesdata_employed.RDS"))
#| warning: false
glimpse(earn)
earn_clean <- earn %>%
select(sex, race, age, year, median_weekly_earn , n_persons) %>%
mutate(
age_group = case_when(  age == "16 to 24 years" ~ 1 ,
age == "25 to 54 years" ~ 2 ,
age == "55 years and over" ~ 3 ,
),
sex_group = factor(sex, levels = c("Both Sexes", "Men", "Women") , labels = c(0, 1, 2))
)  %>%
filter(age_group == 2 ) %>%
mutate(Race_group = factor(race, levels = c("All Races", "Asian", "Black or African American","White") , labels = c(0, 1, 2, 3) ))
adults_earn_race <- earn_clean %>%
group_by( race, year) %>%
summarise(
year_earn = sum(median_weekly_earn)
)  %>%
arrange(year, .by_group = TRUE)
adults_earn_sex <- earn_clean %>%
group_by( sex_group, year) %>%
summarise(
year_earn = sum(median_weekly_earn)
) %>%
arrange(desc(year), .by_group = TRUE)
earn_wider <- pivot_wider(earn_clean, names_from = sex, values_from = median_weekly_earn)
earn_wider <- as.tibble(earn_wider)
replace_na(earn_wider, list(Both_sex = 0 ))
adults_earn_race %>%
ggplot( aes(year, year_earn, color = race))  +
geom_smooth(stat = "smooth", position = "identity", method = "lm") +
labs(
title = "Median weekly earning by race over time",
subtitle = "Increasing trend of weekly earning from 2010 to 2020",
caption = "Siyu Zou",
y = "Median weekly earning (Current dollars)",
x = "Time (Year)"
) +
scale_x_continuous(breaks = seq(2010, 2020, 1), labels = seq(2010, 2020, 1) ) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 15),
plot.subtitle = element_text(hjust = 0.5, color = "darkblue", face = "italic", size = 13),
axis.title = element_text(color = "black", size = 12),
axis.text = element_text(color = "black", size = 11)
)
#| column: margin
#| fig-cap: "Male vs female, colored by sex"
adults_earn_sex %>%
ggplot( aes(year, year_earn, color = sex_group))  +
geom_boxplot(stat = "boxplot", position = "dodge2" ) +
labs(
title = "Median weekly earning by sex over time",
subtitle = "Increasing trend of weekly earning from 2010 to 2020",
caption = "Siyu Zou",
y = "Median weekly earning (Current dollars)",
x = "Time (Year)"
) +
scale_x_continuous(breaks = seq(2010, 2020, 1), labels = seq(2010, 2020, 1) ) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 15),
plot.subtitle = element_text(hjust = 0.5, color = "darkblue", face = "italic", size = 13),
axis.title = element_text(color = "black", size = 12),
axis.text = element_text(color = "black", size = 11)
)
earn_clean %>%
ggplot(aes(year, median_weekly_earn, color = sex_group)) +
geom_point( ) +
geom_smooth(method = 'loess') +
facet_grid( sex ~ race , scales = "free") +
labs(
title = "Median weekly earning over time",
subtitle = "Increasing trend, stratified by race and sex",
x = "Time(year)",
y = "Median weekly earning (Current dollars)",
caption = "Siyu Zou"
) +
scale_x_continuous(breaks = seq(2010, 2020, 3), labels = seq(2010, 2020, 3) ) +
theme_minimal() +
theme(
strip.text = element_text(color = "#1380A1" , size = 8),
strip.background = element_rect(fill = "white", color = "white", linewidth = 1  ),
plot.title = element_text(hjust = 0.5, color = "black", face = "bold", size = 15) ,
plot.subtitle = element_text(hjust = 0.5, color = "black", face = "italic", size = 13) ,
plot.background = element_rect(fill = "white" ),
# panel.grid.major = element_line(color = "white", linewidth = 0.5),
# panel.grid.minor = element_line(color = "white"),
axis.title = element_text(color = "black",size = 12),
axis.text = element_text(color = "black", size = 9)
)
earn_race_ci <- earn_clean %>%
group_by( race, year) %>%
summarise(
year_earn = sum(median_weekly_earn),
earn_CI = calculate_CI( c(median_weekly_earn, 0.90))
)  %>%
arrange(year, .by_group = TRUE)
earn_race_ci
earn_race_ci <- earn_clean %>%
group_by( race, year) %>%
summarise(
year_earn = sum(median_weekly_earn),
earn_lower_CI = calculate_CI( c(median_weekly_earn, 0.90))[1],
earn_upper_CI = calculate_CI( c(median_weekly_earn, 0.90))[2]
)  %>%
arrange(year, .by_group = TRUE)
earn_race_ci
summary_earn_sex_ci <- earn_clean %>%
group_by( sex_group, year) %>%
summarise(
year_earn = mean(median_weekly_earn),
lower_bound = calculate_CI(median_weekly_earn)[1],
upper_bound = calculate_CI(median_weekly_earn)[2]
)
summary_earn_sex_ci
library(CalSiyu)
set.seed(1234)
x <- rnorm(100)
ci_object <- make_ci_class(x)
# Calculating a 95% confidence interval
ci_example <- calculate_CI(ci_object)
ci_example2 <- calculate_CI.ci_class(ci_object, 0.95)
# Calculating a 95% confidence interval
ci_example <- calculate_CI(ci_object)
ci_example2 <- calculate_CI(ci_object, 0.90)
ci_example
ci_example2
adults_earn_race %>%
ggplot( aes(year, year_earn, color = race))  +
geom_smooth(stat = "smooth", position = "identity", method = "lm") +
labs(
title = "Median weekly earning by race over time",
subtitle = "Increasing trend of weekly earning from 2010 to 2020",
caption = "Siyu Zou",
y = "Median weekly earning (Current dollars)",
x = "Time (Year)"
) +
scale_x_continuous(breaks = seq(2010, 2020, 1), labels = seq(2010, 2020, 1) ) +
theme_minimal() +
theme(
plot.title = element_text(hjust = 0.5, face = "bold", size = 15),
plot.subtitle = element_text(hjust = 0.5, color = "darkblue", face = "italic", size = 13),
axis.title = element_text(color = "black", size = 12),
axis.text = element_text(color = "black", size = 11)
)
?echo
??r echo
library(ggplot2) ## package to make ggplots
# install.packages('reshape2') # run this line if reshape2 is not installed
library(reshape2) ## package to make data frames for ggplot
library(tidyverse)
install.packages("C:/Users/17103/OneDrive - Johns Hopkins/Term 2/777computing/SunanP2_0.0.0.9000.tar.gz", repos = NULL, type = "source")
library(SunanP2)
browseVignettes('SunanP2')
?fn_sin()
fn_sin(1, 10)
sin(1)
library(CalSiyu)
?fn_sin()
fn_sin(5, 10)
sin(5)
fn_sin(5, 20)
fn_sin(5, 5)
cat('菜')
fn_sin <- function(x, k) {
# check if x is a numeric value
if ( !is.numeric(x) ){
stop("x need to be changed to a single number")
}
# check if k is an integer
if ( k != as.integer(k) ) {
stop("k need to be changed to an integer")
}
sin_sum = 0
for (i in 1:k) {
sin = (-1)^(i-1)* x^(2*(i-1) + 1)/factorial(2*i + 1)
sin_sum = sin_sum + sin
}
return(sin_sum)
}
fn_sin(5, 20)
fn_sin(5, 10)
fn_sin <- function(x, k) {
# check if x is a numeric value
if ( !is.numeric(x) ){
stop("x need to be changed to a single number")
}
# check if k is an integer
if ( k != as.integer(k) ) {
stop("k need to be changed to an integer")
}
sin_sum = 0
for (i in 1:k) {
sin = (-1)^(i-1)* x^(2*(i-1) + 1)/factorial(2*(i-1) + 1)
sin_sum = sin_sum + sin
}
return(sin_sum)
}
fn_sin(5, 10)
sin(5)
fn_cos(5, 10)
cos(5)
library(CalSiyu)
library(ggplot2) ## package to make ggplots
# install.packages('reshape2') # run this line if reshape2 is not installed
library(reshape2) ## package to make data frames for ggplot
library(tidyverse)
x_values <- seq(0, 10, by = 0.1)
y_cos <- cos(x_values)
y_fn_1 <- fn_cos(x_values, 1)
y_fn_3 <- fn_cos(x_values, 3)
y_fn_5 <- fn_cos(x_values, 5)
y_fn_7 <- fn_cos(x_values, 7)
y_fn_9 <- fn_cos(x_values, 9)
data <-data.frame(x_values, y_cos, y_fn_1,y_fn_3, y_fn_5, y_fn_7, y_fn_9 )
data_melted <- melt(data, id.vars = "x_values") ## use ?melt() to see what it's doing
## Change labels for y1, y2, y3, y4, y5
data_melted$variable <-
factor(as.character(data_melted$variable),
levels = c("y_cos", "y_fn_1", "y_fn_3", "y_fn_5", "y_fn_7", "y_fn_9"),
labels = c("cos(x)", "fn_cos, k=1",
"fn_cos, k=3", "fn_cos, k=5",
"fn_cos, k=7", "fn_cos, k=9"))
data_melted %>%
ggplot( aes(x_values,value ) ) +
geom_line(data = subset(data_melted, variable != "cos"),aes(color = variable), linewidth=1) +
geom_point(data = subset(data_melted, variable == "cos"),aes(color = variable), size = 1 ) +
theme_minimal() +
labs(
title = "Comparison of fn_cos(x, k) with cos(x)",
x = "x values",
y = "Calculated y values",
color = "Function and k value"
) +
guides(color = guide_legend(override.aes = list(linetype = c("blank", "solid", "solid", "solid", "solid", "solid"),
shape = c(16, NA, NA, NA, NA, NA))))
cos(100)
fn_cos(100, 5)
fn_cos <- function(x, k) {
# check if x is a numeric value
if ( !is.numeric(x) ){
stop("x need to be changed to a single numeric value")
}
# check if k is an integer
if ( k != as.integer(k) ) {
stop("k need to be changed to an integer")
}
cos_sum = 0
for (i in 1:k) {
cos = (-1)^(i-1)* x^(2*(i-1))/factorial(2*(i-1) )
cos_sum = cos_sum + cos
}
return(cos_sum)
}
fn_cos(5, 10)
cos(5)
fn_cos(5, 20)
library(CalSiyu)
remove.packages('SunanP2')
library(markdown)
detach("package:markdown", unload = TRUE)
# Install the devtools package if not already installed
if (!requireNamespace("devtools", quietly = TRUE)) {
install.packages("devtools")
}
# Install SunanP2 from GitHub (contain vignettes)
devtools::install_github("https://github.com/SNGao/biostat777-package-SunanP2", build_vignettes = TRUE)
R
R --version
library(SunanP2)
# Install the devtools package if not already installed
if (!requireNamespace("devtools", quietly = TRUE)) {
install.packages("devtools")
}
# Install SunanP2 from GitHub (contain vignettes)
devtools::install_github("https://github.com/SNGao/biostat777-package-SunanP2", build_vignettes = TRUE)
remove.packages(CalSiyu)
remove.packages("CalSiyu")
devtools::install_github("https://github.com/jhu-statprogramming-fall-2023/biostat777-project2-zsyfirst", build_vignettes = TRUE)
devtools::install_github("https://github.com/jhu-statprogramming-fall-2023/biostat777-project2-zsyfirst/tree/main", build_vignettes = TRUE)
library(CalSiyu)
remove.packages("CalSiyu")
devtools::install_github("zsyfirst/biostat777_package", build_vignettes = TRUE)
